---
title: "EDA"
format: html
editor: visual
---

# Loading libraries

We will use when possible [tidyverse](https://www.tidyverse.org/)

```{r}
library(MASS) # step
library(tidyverse) 
library(readxl)
library(corrplot) 
library(car)  # For VIF calculation
library(GGally) 
library(visdat)
library(naniar)
```

## Reading and formatting the data

We will use the https://archive.ics.uci.edu/dataset/579/myocardial+infarction+complications

```{r}
raw_data <- read_csv("raw_data/MI.data", col_names = FALSE)
codebook <- read_excel("raw_data/codebook.xlsx")
codebook$`Variable Name` <- str_to_upper(codebook$`Variable Name`)
```

```{r}
colnames(raw_data) <- codebook$`Variable Name`
```

```{r}
table(codebook$Role)

codebook |> 
  filter(
    Role == "Target"
  )

outcomes_index <- codebook$Role == "Target"
```

## Data Type Conversion

```{r}
raw_data |> 
  mutate(
    SEX = factor(
      SEX, 
      levels = 0:1, 
      labels = c("female", "male")
      ),
    INF_ANAM = factor(
      INF_ANAM, 
      levels = 0:3,
      labels = c("zero", "one", "two", "three and more"),
      ordered = T
      ),
    STENOK_AN = factor(
      STENOK_AN,
      levels = 0:6,
      labels = c(
        "never",
        "during the last year",
        "one year ago",
        "two years ago",
        "three years ago",
        "4-5 years ago",
        "more than 5 years ago"
        ),
      ordered = T
      ),
    FK_STENOK = factor(
      FK_STENOK,
      levels = 0:4,
      labels = c(
        "there is no angina pectoris",
        "I FC",
        "II FC",
        "III FC",
        "IV FC"
        ),
      ordered = T
      ),
    IBS_POST = factor(
      IBS_POST,
      levels = 0:2,
      labels = c(
        "there was no CHD",
        "exertional angina pectoris",
        "unstable angina pectoris"
        ),
      ordered = T
      ),
    IBS_NASL = factor(
      IBS_NASL,
      levels = 0:1,
      labels = c(
        "is not burdened",
        "burdened"
        )
      ),
    GB = factor(
      GB,
      levels = 0:3,
      labels = c(
        "there is no essential hypertension",
        "Stage 1",
        "Stage 2",
        "Stage 3"
        ),
      ordered = T
      ),
    DLIT_AG = factor(
      DLIT_AG,
      levels = 0:7,
      labels = c(
        "there was no arterial hypertension",
        "one year",
        "two years",
        "three years",
        "four years",
        "five years",
        "6-10 years",
        "more than 10 years"
        ),
      ordered = T
      ),
    ZSN_A = factor(
      ZSN_A,
      levels = 0:4,
      labels = c(
        "there is no chronic heart failure",
        "I stage",
        "II stage",
        "III stage",
        "IV stage"
        ),
      ordered = T
      ),
    LET_IS = factor(
      LET_IS,
      levels = 0:7,
      labels = c(
        "alive",
        "cardiogenic shock",
        "pulmonary edema",
        "myocardial rupture",
        "progress of congestive heart failure",
        "thromboembolism",
        "asystole",
        "ventricular fibrillation"
        ),
      ordered = F
      ),
    TIME_B_S = factor(
      TIME_B_S,
      levels = 1:9,
      labels = c(
        "less than 2 hours",
        "2-4 hours",
        "4-6 hours",
        "6-8 hours",
        "8-12 hours",
        "12-24 hours",
        "more than 1 days",
        "more than 2 days",
        "more than 3 days"
        ),
      ordered = T
      ),
  ) |> 
  mutate_at(
    vars(ANT_IM:POST_IM),
    \(x) factor(
      x,
      levels = 0:4,
      labels = c(
        "there is no infarct in this location",
        "QRS has no changes",
        "QRS is like QR-complex",
        "QRS is like Qr-complex",
        "QRS is like QS-complex"
        ),
      ordered = T
      )
  ) |> 
  mutate_at(
    vars(R_AB_1_N:R_AB_3_N),
    \(x) factor(x, levels = 0:3,
                labels = c("there is no relapse",
                           "only one",
                           "2 times",
                           "3 or more times"
                           ),
                ordered = T
                )
  ) |> 
  mutate_at(
    vars(NA_R_1_N,NOT_NA_1_N),
    \(x) factor(
      x,
      levels = 0:4,
      labels = c(
        "no",
        "once",
        "twice",
        "three times",
        "four or more times"
        ),
      ordered = T
      )
  ) |>
  mutate_at(
    vars(NA_R_2_N,NOT_NA_2_N),
    \(x) factor(
      x,
      levels = 0:3,
      labels = c(
        "no",
        "once",
        "twice",
        "three times"
        ),
      ordered = T
      )
  ) |>
  mutate_at(
    vars(NA_R_3_N,NOT_NA_3_N),
    \(x) factor(
      x,
      levels = 0:2,
      labels = c(
        "no",
        "once",
        "twice"
        ),
      ordered = T
      )
  ) |>
  mutate_at(
    vars(
      SIM_GIPERT,
      NR_11:ZAB_LEG_06,
      O_L_POST:FIB_G_POST,
      IM_PG_P:GIPO_K,
      GIPER_NA,
      NA_KB:NITR_S,
      LID_S_N:P_IM_STEN
      ),
    \(x) factor(x, levels = 0:1, labels = c("no", "yes"))
  ) |> 
  mutate_at(
    vars(
      AGE,
      S_AD_KBRIG:D_AD_ORIT,
      K_BLOOD,
      NA_BLOOD:ROE
      ),
    as.numeric
  ) -> data
```

## Basic summary

```{r}
summary(data[,-outcomes_index])
summary(data[,outcomes_index])
```

## Duplicate Records

```{r}
sum(duplicated(data$ID))
```

If there are repeated values you have to think about what you need for your particular problem. You can handle that case with functions like:

-   group_by()
-   filter()
-   first()
-   last()
-   summarise()

## Missing Values

```{r}
vis_dat(data)
```

```{r}
vis_miss(data) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
```

```{r}
gg_miss_var(data, show_pct = T) +
  theme(
    # Reduce font size for y-axis labels
    axis.text.y = element_text(size = 6)   # Change 6 to your desired size
  )
```

```{r}
gg_miss_case(data, show_pct = T)
```

```{r}
gg_miss_fct(x = data, fct = LET_IS)
```

more about missing data in here:

https://cran.r-project.org/web/packages/finalfit/vignettes/missing.html

```{r}
missings_per_var <- miss_var_summary(data, order = F)
missings_per_var
```

```{r}
missings_per_case <- miss_case_summary(data, order = F)
```

## Variable preselection

```{r}
variables_to_keep <- missings_per_var$pct_miss < 25 # 20%
cases_to_keep <- missings_per_case$pct_miss < 25

sum(variables_to_keep)
sum(cases_to_keep)

data_pre_selec <- data[cases_to_keep, variables_to_keep]

dim(data_pre_selec)
```

## Data Visualization

```{r}
data_pre_selec |> 
  select_if(is.numeric) |>
  select(-ID) |> 
  ggpairs()
```

## Feature Engineering and Normalization

```{r}
data_pre_selec |> 
  select_if(is.numeric) |> 
  select(-ID) |> 
  mutate_all(.funs = \(x) {1/x^2}) |> 
  map(shapiro.test)
```

```{r}
data_pre_selec |> 
  select_if(is.numeric) |> 
  select(-ID) |> 
  mutate_all(.funs = \(x) {1/sqrt(x)}) |> 
  as.list() |> 
  map(shapiro.test)
```

```{r}
data_pre_selec |> 
  select_if(is.numeric) |> 
  select(-ID) |> 
  mutate_all(log) |> 
  as.list() |> 
  map(shapiro.test)
```

```{r}
data_pre_selec |> 
  select_if(is.numeric) |> 
  select(-ID) |> 
  mutate_all(sqrt) |> 
  as.list() |> 
  map(shapiro.test)
```

## Standardize

```{r}
data_pre_selec |> 
  transmute(
    across(
      .names = "{.col}_scaled",
      where(is.numeric) & !matches("ID"), 
      scale
      )
    ) -> numerics_standardized

summary(numerics_standardized)
```

Also for the Box-Cox Transformations

check `boxCoxVariable()` in `car` and `boxcox()` in `MASS`

## Outliers

```{r}
numerics_standardized |> 
  pivot_longer(cols = everything(), names_to = "variable") |> 
  ggplot(aes(x = variable, y = value)) + 
  geom_boxplot()
```

```{r}
cbind(data_pre_selec, numerics_standardized) |> 
  as.data.frame() |> 
  filter_at(
    vars(AGE_scaled:ROE_scaled),
    all_vars(. < 3.5)
    ) -> data_no_outliers
```

```{r}
summary(data_no_outliers)
```

## Export data

```{r}
write.csv(data_no_outliers, file = "processed_data/data_no_outliers.csv")
```

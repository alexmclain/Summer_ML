"0","# Define the number of folds for cross-validation"
"0","K <- 10"
"0",""
"0","# Create an empty vector to store the cross-validation errors"
"0","cv_errors <- matrix(nrow = K,ncol = 3) # 4 models to compare"
"0",""
"0","# Create indices for cross-validation folds"
"0","cv_indices <- rep_len(1:K, nrow(training_data))"
"0","cv_indices <- sample(cv_indices, nrow(training_data)) "
"0","table(cv_indices)"
"1","cv_indices
"
"1"," 1 "
"1"," 2 "
"1"," 3 "
"1"," 4 "
"1"," 5 "
"1"," 6 "
"1"," 7 "
"1"," 8 "
"1"," 9 "
"1","10 "
"1","
"
"1","18 "
"1","18 "
"1","18 "
"1","18 "
"1","18 "
"1","18 "
"1","18 "
"1","18 "
"1","17 "
"1","17 "
"1","
"
"0","# Perform cross-validation"
"0","for (fold in 1:K) {"
"0","  # Extract training and test sets for this fold"
"0","  train_folds <- training_data[cv_indices != fold, ]"
"0","  test_fold <- training_data[cv_indices == fold, ]"
"0","  "
"0","  # Fit the full model on the training folds"
"0","  full_model <- lm(BODYFAT ~ ., data = train_folds)"
"0","  "
"0","  # Reduced the model"
"0","  reduced_model <- stepAIC(full_model,trace = F)"
"0","  "
"0","  # VIF"
"0","  vifs <- vif(reduced_model)"
"0","  variable_to_remove <- variable.names(reduced_model)[which.max(vifs) + 1] # +1 for intercept"
"0","  vif_model <- update("
"0","    reduced_model,"
"0","    as.formula(paste("". ~ . - "",variable_to_remove))"
"0","    )"
"0","  "
"0","  # Predict on the test data"
"0","  predictions_full <- predict(full_model, newdata = test_fold)"
"0","  predictions_reduced_model <- predict(reduced_model, newdata = test_fold)"
"0","  predictions_vif <- predict(vif_model, newdata = test_fold)"
"0","  "
"0","  # Calculate the mean squared error for this fold"
"0","  cv_errors[fold,1] <- mean((predictions_full - test_fold[[""BODYFAT""]])^2)"
"0","  cv_errors[fold,2] <- mean((predictions_reduced_model - test_fold[[""BODYFAT""]])^2)"
"0","  cv_errors[fold,3] <- mean((predictions_vif - test_fold[[""BODYFAT""]])^2)"
"0","}"
"0",""
"0","# Calculate the mean cross-validation error"
"0","cv_errors"
"1","     "
"1","     [,1]"
"1","     [,2]"
"1","     [,3]"
"1","
 [1,]"
"1"," 21.53494"
"1"," 21.93143"
"1"," 24.33562"
"1","
 [2,]"
"1"," 18.92466"
"1"," 17.14931"
"1"," 18.17502"
"1","
 [3,]"
"1"," 27.07842"
"1"," 26.03980"
"1"," 34.13418"
"1","
 [4,]"
"1"," 13.66271"
"1"," 14.18644"
"1"," 14.77362"
"1","
 [5,]"
"1"," 17.90245"
"1"," 17.94712"
"1"," 14.97626"
"1","
 [6,]"
"1"," 20.61845"
"1"," 19.47201"
"1"," 20.44819"
"1","
 [7,]"
"1"," 22.55812"
"1"," 22.67459"
"1"," 26.00049"
"1","
 [8,]"
"1"," 18.14476"
"1"," 17.60687"
"1"," 18.61446"
"1","
 [9,]"
"1"," 23.73569"
"1"," 21.70536"
"1"," 17.34450"
"1","
[10,]"
"1"," 32.86422"
"1"," 30.53949"
"1"," 37.68308"
"1","
"
"0","mean_cv_error <- colMeans(cv_errors)"
"0","mean_cv_error"
"1","[1]"
"1"," 21.70244"
"1"," 20.92524"
"1"," 22.64854"
"1","
"
